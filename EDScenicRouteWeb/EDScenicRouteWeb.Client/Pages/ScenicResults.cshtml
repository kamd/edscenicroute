@using System
@using System.Collections.Generic
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using Microsoft.AspNetCore.Blazor.Components


<div class="col">

    @if (CurrentlySearching)
    {
        <div class="alert alert-warning">Searching...</div>
    }
    else if (SearchCompleted)
    {
        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@(ErrorMessage)</div>
        }
        else if (ScenicSuggestions.Count > 0)
        {
            <div class="alert alert-primary">
                Straight line distance of your trip: <strong>@(StraightLineDistance)Ly</strong>
            </div>
            <div class="alert alert-info">Consider visiting...</div>
            <SuggestionsPagination bind-PageNumber="@pageNumber" ScenicSuggestionPages="@ScenicSuggestionPages" />
            foreach (var item in ScenicSuggestions.Skip(pageNumber * SUGGESTIONS_PER_PAGE).Take(SUGGESTIONS_PER_PAGE))
            {
                <ScenicSuggestionView Item=@item ShipJumpRange=@ShipJumpRange MaxExtraDistance=@MaxExtraDistance />
            }
            <SuggestionsPagination bind-PageNumber="@pageNumber" ScenicSuggestionPages="@ScenicSuggestionPages" />
        }
        else
        {
            <div class="alert alert-info">No suggestions.</div>
        }
    }
</div>
    
@functions {

    private const int SUGGESTIONS_PER_PAGE = 30;

    [Parameter]
    bool CurrentlySearching { get; set; }

    [Parameter]
    string ErrorMessage { get; set; }

    [Parameter]
    float StraightLineDistance { get; set; }

    [Parameter]
    float ShipJumpRange { get; set; }

    [Parameter]
    float MaxExtraDistance { get; set; }

    [Parameter]
    IReadOnlyList<ScenicSuggestion> ScenicSuggestions { get; set; }

    [Parameter]
    bool SearchCompleted
    {
        get => searchCompleted;
        set
        {
            searchCompleted = value;
            pageNumber = 0;
        }
    }

    private int ScenicSuggestionPages => (int)Math.Ceiling((ScenicSuggestions?.Count ?? 0) / (float)SUGGESTIONS_PER_PAGE);

    private int pageNumber
    {
        get => _pageNumber;
        set
        {
            _pageNumber = value;
            StateHasChanged();
        }
    }

    private bool searchCompleted;
    private int _pageNumber;
}
