@using System
@using System.Collections.Generic
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using EDScenicRouteWeb.Client.Shared
@using Microsoft.AspNetCore.Blazor.Components


<div class="col">

    @if (CurrentlySearching)
    {
        <div class="alert alert-warning">Searching...</div>
    }
    else if (SearchCompleted)
    {
        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@(ErrorMessage)</div>
        }
        else if (ScenicSuggestions.Count > 0)
        {
            <div class="row">
                <div class="col col-sm-6">
                    <div class="alert alert-primary">
                        Straight line distance of your trip: <strong>@(StraightLineDistance)Ly</strong>
                    </div>
                </div>
                <div class="col col-sm-6">
                    <div class="alert alert-info">Consider visiting...</div>
                </div>
            </div>

            <div class="row justify-content-center filterbar">
                <div class="btn-group input-group filtergroup btn-group-toggle flex-wrap" data-toggle="buttons">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Filter POIs:</span>
                    </div>
                    <label class="filterbuttonlabel btn btn-primary">
                        <button type="button" class="filterbutton btn btn-primary" onclick="@(() => FilterAll(false))">All Off</button>
                    </label>
                    @foreach (var poiType in POITypes)
                    {
                        <label class="btn btn-primary @(poiFilters[poiType] ? "active" : "")" data-toggle="tooltip"
                               title="@(GalacticPOIEnumConverter.ConvertToString(poiType))">
                            <input checked="@(poiFilters[poiType])" autocomplete="off" type="checkbox"
                                   onchange="@(eventArgs => OnFilterClick(poiType, (bool) eventArgs.Value))" />
                            <span class="@(GalacticPOIIcons.IconClassForGalacticPOIType(poiType))"></span>
                        </label>
                    }
                    <label class="filterbuttonlabel btn btn-primary">
                        <button type="button" class="filterbutton btn btn-primary" onclick="@(() => FilterAll(true))">All On</button>
                    </label>
                </div>
            </div>

            <div class="row justify-content-center filterbar">
                <div class="btn-group input-group filtergroup btn-group-toggle" data-toggle="buttons">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Sort by:</span>
                    </div>
                    <label class="btn btn-primary @(SortByExtraJumps ? "active" : "")">
                        <input name="sortby" id="sortby-extradistance" autocomplete="off" checked="" type="checkbox"
                               bind="@SortByExtraJumps"/>Extra Jumps
                    </label>
                    <label class="btn btn-primary @(SortByDistanceAlongRoute ? "active" : "")">
                        <input name="sortby" id="sortby-distancealongroute" autocomplete="off" type="checkbox"
                               bind="@SortByDistanceAlongRoute"/>Distance Along Route
                    </label>
                </div>
            </div>

            <SuggestionsPagination bind-PageNumber="@pageNumber" ScenicSuggestionPages="@ScenicSuggestionPages" />
            foreach (var item in FilteredSuggestions.Skip(pageNumber * SUGGESTIONS_PER_PAGE).Take(SUGGESTIONS_PER_PAGE))
            {
                <ScenicSuggestionView Item=@item ShipJumpRange=@ShipJumpRange MaxExtraDistance=@MaxExtraDistance />
            }
            <SuggestionsPagination bind-PageNumber="@pageNumber" ScenicSuggestionPages="@ScenicSuggestionPages" />
        }
        else
        {
            <div class="alert alert-info">No suggestions.</div>
        }
    }
</div>

@functions {

    private const int SUGGESTIONS_PER_PAGE = 25;

    [Parameter]
    bool CurrentlySearching { get; set; }

    [Parameter]
    string ErrorMessage { get; set; }

    [Parameter]
    float StraightLineDistance { get; set; }

    [Parameter]
    float ShipJumpRange { get; set; }

    [Parameter]
    float MaxExtraDistance { get; set; }

    [Parameter]
    IReadOnlyList<ScenicSuggestion> ScenicSuggestions { get; set; }

    [Parameter]
    bool SearchCompleted
    {
        get => searchCompleted;
        set
        {
            searchCompleted = value;
            pageNumber = 0;
        }
    }

    private Dictionary<GalacticPOIType, bool> poiFilters;

    private List<GalacticPOIType> POITypes { get; } = Enum.GetValues(typeof(GalacticPOIType)).Cast<GalacticPOIType>().ToList();

    private IReadOnlyList<ScenicSuggestion> FilteredSuggestions =>
        ScenicSuggestions?.
            Where(s => poiFilters[s.POI.Type]).
            OrderBy(s => SortByExtraJumps ? s.ExtraDistance : s.PercentageAlongRoute).
            ToList();

    private int ScenicSuggestionPages => (int)Math.Ceiling((FilteredSuggestions.Count) / (float)SUGGESTIONS_PER_PAGE);

    private int pageNumber
    {
        get => _pageNumber;
        set
        {
            _pageNumber = value;
            StateHasChanged();
        }
    }

    private bool searchCompleted;
    private int _pageNumber;

    private bool SortByExtraJumps { get; set; } = true;

    private bool SortByDistanceAlongRoute
    {
        get => !SortByExtraJumps;
        set => SortByExtraJumps = !value;
    }

    protected override void OnInit()
    {
        poiFilters = new Dictionary<GalacticPOIType, bool>(POITypes.Count);
        foreach (var poiType in POITypes)
        {
            poiFilters.Add(poiType, true);
        }
    }

    private void OnFilterClick(GalacticPOIType type, bool visible)
    {
        poiFilters[type] = visible;
        pageNumber = 0;
    }

    private void FilterAll(bool visible)
    {
        foreach (var type in POITypes)
        {
            poiFilters[type] = visible;
        }
    }
}
