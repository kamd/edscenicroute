@using System
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using EDScenicRouteWeb.Client.Services


<p>Enter trip details below.</p>
<div class="well">
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <label class="control-label">From:</label><input class="form-control" @bind(details.FromSystemName) placeholder="Sol" />
            </div>
            <div class="form-group">
                <label class="control-label">To:</label><input class="form-control" @bind(details.ToSystemName) placeholder="Colonia" />
            </div>
            
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label class="control-label">Jump Range of Ship: </label><input class="form-control" @bind(JumpRange) type="number" min="10" max="80"/>
            </div>
            <div class="form-group">
                <label class="control-label">Acceptable Extra Jumps:</label><input class="form-control" @bind(AcceptableExtraJumps) type="number" min="1" max="10000"/>
            </div>
            
            <button class="btn btn-primary" @onclick(async () => await OnSearch(details))>Search for POIs to visit</button>

        </div>
    </div>
</div>

@functions {


    public Func<RouteDetails, Task> OnSearch { get; set; }

    public AppState State
    {
        get => _state;
        set
        {
            _state = value;
            RecalculateAcceptableExtraDistance();
        }
    }

    private readonly RouteDetails details = new RouteDetails()
    {
        FromSystemName = "Sol",
        ToSystemName = "Colonia"
    };

    private int acceptableExtraJumps = 5;
    private AppState _state;

    private string JumpRange
    {
        get { return State.ShipJumpRange.ToString(); }
        set
        {
            if (float.TryParse(value, out var result))
            {
                State.ShipJumpRange = result;
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private string AcceptableExtraJumps
    {
        get { return acceptableExtraJumps.ToString(); }
        set
        {
            if (int.TryParse(value, out var result))
            {
                acceptableExtraJumps = result;
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private void RecalculateAcceptableExtraDistance()
    {
        details.AcceptableExtraDistance = State.ShipJumpRange * acceptableExtraJumps;
    }


}
