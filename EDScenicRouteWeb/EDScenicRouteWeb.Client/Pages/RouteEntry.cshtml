@using System
@using System.Globalization
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using EDScenicRouteWeb.Client.Services
@using Microsoft.AspNetCore.Blazor.Components


<p>Enter trip details below.</p>
<div class="card text-white border-secondary mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <fieldset>
                        <label class="control-label" for="fromTextBox">From:</label>
                        <TypeAheadTextBox State=@State Placeholder="Sol" ref="fromTextBox" Id="fromTextBox" />
                    </fieldset>
                </div>
                <div class="form-group">
                    <fieldset>
                        <label class="control-label" for="toTextBox">To:</label>
                        <TypeAheadTextBox State=@State Placeholder="Colonia" ref="toTextBox" Id="toTextBox" />
                    </fieldset>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="control-label">Jump Range of Ship: </label><input class="form-control" bind="@(JumpRange)" type="number" min="10" max="80" />
                </div>
                <div class="form-group">
                    <label class="control-label">Acceptable Extra Jumps:</label>
                    <input class="form-control" bind="@(AcceptableExtraJumps)"
                           type="number" min="1" max="10000" />
                </div>

                <button class="btn btn-primary" onclick="@OnSearchClick">Search for POIs to visit</button>

            </div>
        </div>
    </div>
</div>

@functions {

    [Parameter]
    Func<RouteDetails, Task> OnSearch { get; set; }

    private async void OnSearchClick()
    {
        details.FromSystemName = string.IsNullOrEmpty(fromTextBox.POI) ? "Sol" : fromTextBox.POI;
        details.ToSystemName = string.IsNullOrEmpty(toTextBox.POI) ? "Colonia" : toTextBox.POI;
        await OnSearch(details);
    }

    private TypeAheadTextBox fromTextBox;
    private TypeAheadTextBox toTextBox;

    [Parameter]
    AppState State
    {
        get => state;
        set
        {
            state = value;
            acceptableExtraJumps = (int) Math.Round(state.AcceptableExtraDistance / state.ShipJumpRange);
            RecalculateAcceptableExtraDistance();
        }
    }

    private readonly RouteDetails details = new RouteDetails()
    {
        FromSystemName = "Sol",
        ToSystemName = "Colonia"
    };

    private int acceptableExtraJumps;
    private AppState state;

    private string JumpRange
    {
        get { return State.ShipJumpRange.ToString(CultureInfo.InvariantCulture); }
        set
        {
            if (float.TryParse(value, out var result))
            {
                State.ShipJumpRange = result;
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private string AcceptableExtraJumps
    {
        get { return acceptableExtraJumps.ToString(); }
        set
        {
            if (int.TryParse(value, out var result))
            {
                acceptableExtraJumps = result;
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private void RecalculateAcceptableExtraDistance()
    {
        details.AcceptableExtraDistance = State.ShipJumpRange * acceptableExtraJumps;
    }

}