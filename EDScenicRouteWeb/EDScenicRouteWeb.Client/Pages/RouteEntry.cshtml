@using System
@using System.Globalization
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using EDScenicRouteWeb.Client.Services
@using EDScenicRouteWeb.Client.Shared
@using Microsoft.AspNetCore.Blazor.Components

<p>Enter trip details below.</p>
<div class="card text-white border-secondary mb-3">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <fieldset>
                        <label class="control-label" for="fromTextBox">From:</label>
                        <TypeAheadTextBox State="@State" Placeholder="@DEFAULT_FROM" Id="fromTextBox" bind-POI="@fromPOI" />
                    </fieldset>
                </div>
                <div class="form-group">
                    <fieldset>
                        <label class="control-label" for="toTextBox">To:</label>
                        <TypeAheadTextBox State="@State" Placeholder="@DEFAULT_TO" Id="toTextBox" bind-POI="@toPOI" />
                    </fieldset>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group">
                    <label class="control-label">Jump Range of Ship: </label><input class="form-control" bind="@(JumpRange)" type="number" min="10" max="80"/>
                </div>
                <div class="form-group">
                    <label class="control-label">Acceptable Extra Jumps:</label>
                    <input class="form-control" bind="@(AcceptableExtraJumps)"
                           type="number" min="1" max="@(MAX_EXTRA_JUMPS)"/>
                </div>

                <button class="btn btn-primary" onclick="@OnSearchClick">Search for POIs to visit</button>

            </div>
        </div>
    </div>
</div>

@functions {

    private const int MAX_EXTRA_JUMPS = 500;
    private const string DEFAULT_FROM = "Sol";
    private const string DEFAULT_TO = "Colonia";

    private async void OnSearchClick()
    {
        State.RouteDetails.FromSystemName = string.IsNullOrEmpty(fromPOI) ? DEFAULT_FROM : fromPOI;
        State.RouteDetails.ToSystemName = string.IsNullOrEmpty(toPOI) ? DEFAULT_TO : toPOI;
        await State.GetSuggestions();
    }

    [Parameter]
    AppState State
    {
        get => state;
        set
        {
            state = value;
            acceptableExtraJumps = (int) Math.Round(state.AcceptableExtraDistance / state.ShipJumpRange);
            RecalculateAcceptableExtraDistance();
        }
    }

    private int acceptableExtraJumps;
    private AppState state;
    private string fromPOI { get; set; }
    private string toPOI { get; set; }

    private string JumpRange
    {
        get { return State.ShipJumpRange.ToString(CultureInfo.InvariantCulture); }
        set
        {
            if (float.TryParse(value, out var result))
            {
                State.ShipJumpRange = result;
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private string AcceptableExtraJumps
    {
        get { return acceptableExtraJumps.ToString(); }
        set
        {
            if (int.TryParse(value, out var result))
            {
                acceptableExtraJumps = Math.Min(result, 500);
                RecalculateAcceptableExtraDistance();
            }
        }
    }

    private void RecalculateAcceptableExtraDistance()
    {
        State.RouteDetails.AcceptableExtraDistance = State.ShipJumpRange * acceptableExtraJumps;
    }

    protected override void OnInit()
    {
        if (state.RouteDetails.FromSystemName != DEFAULT_FROM && !string.IsNullOrEmpty(state.RouteDetails.FromSystemName))
        {
            fromPOI = state.RouteDetails.FromSystemName;
        }
        if (state.RouteDetails.ToSystemName != DEFAULT_TO && !string.IsNullOrEmpty(state.RouteDetails.ToSystemName))
        {
            toPOI = state.RouteDetails.ToSystemName;
        }
    }

}