@using System
@using EDScenicRouteWeb.Client.Services
@using EDScenicRouteWeb.Shared.DataValidation
@using Microsoft.AspNetCore.Blazor
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Microsoft.AspNetCore.Blazor.Components


<div class="dropdown">
    <input class="form-control" placeholder="@Placeholder" type="text" id="@Id" value="@POI"
           maxlength="@RouteDetailsValidator.MAX_NAME_LENGTH"
           onchange="@OnChanged"
           oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))"
           onfocusout="@TextBoxLosingFocus"/>
    <div class="dropdown-menu @(DropdownState)">
        @foreach (var poi in TypeAheadSuggestions)
        {
            <a class="dropdown-item" href="#" onclick="@(() => POIClicked(poi))">@poi</a>
        }
    </div>
</div>

@functions
{

    [Parameter]
    AppState State { get; set; }

    [Parameter]
    string Placeholder { get; set; }

    [Parameter]
    string Id { get; set; }

    protected override void OnInit()
    {
        // If AppState is firing OnChanged then the autocomplete dropdown is no longer necessary.
        State.OnChanged += () => DropdownOpen = false;
    }

    private string DropdownState { get; set; } = "";

    private bool DropdownOpen { set => DropdownState = value ? "show" : ""; }

    private List<string> TypeAheadSuggestions { get; set; } = new List<string>();

    private void POIClicked(string poi)
    {
        POI = poi;
        DropdownOpen = false;
    }

    private void TextBoxLosingFocus(UIFocusEventArgs focusEventArgs)
    {
        // When Blazor supports checking the focus target, use this method to close the dropdown except when
        // the target is a child of the dropdown.
        //DropdownOpen = false;
    }

    public string POI { get; set; } = "";

    // Until Blazor properly supports Input event, we must redirect that to Changed and handle that.
    // This previousValue is to workaround the Changed event firing when you click an autocomplete option.
    private string previousValue = "";

    async void OnChanged(UIChangeEventArgs args)
    {
        POI = (string)args.Value;
        if (POI == previousValue) return;
        previousValue = POI;

        if (POI.Length >= 3)
        {
            StateHasChanged();
            TypeAheadSuggestions = await State.GetPOITypeaheadSuggestions(POI);
            DropdownOpen = TypeAheadSuggestions.Count > 0;
            StateHasChanged();
        }
        else
        {
            DropdownOpen = false;
        }

    }

}
