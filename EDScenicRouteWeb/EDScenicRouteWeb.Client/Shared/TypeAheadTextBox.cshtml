@using System
@using EDScenicRouteWeb.Client.Services
@using Microsoft.AspNetCore.Blazor
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Microsoft.AspNetCore.Blazor.Components





<div class="dropdown @(DropdownState)">
    
    <input class="form-control" placeholder="@Placeholder" type="text" value="@POI"
           onchange="@OnChanged" oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))"/>
    <ul class="dropdown-menu" role="menu">
        @foreach (var poi in TypeAheadSuggestions)
        {
            <li><a href="#" onclick="@(() => POIClicked(poi))">@poi</a></li>
        }
    </ul>
</div>

@functions
{

    [Parameter]
    AppState State { get; set; }

    [Parameter]
    string Placeholder { get; set; }

    protected override void OnInit()
    {
        // If AppState is firing OnChanged then the autocomplete dropdown is no longer necessary.
        State.OnChanged += () => DropdownOpen = false;
    }

    private string DropdownState { get; set; } = "";

    private bool DropdownOpen { set => DropdownState = value ? "open" : ""; }

    private List<string> TypeAheadSuggestions { get; set; } = new List<string>();

    private void POIClicked(string poi)
    {
        POI = poi;
        DropdownOpen = false;
    }

    public string POI { get; set; } = "";

    // Until Blazor properly supports Input event, we must redirect that to Changed and handle that.
    // This previousValue is to workaround the Changed event firing when you click an autocomplete option.
    private string previousValue = "";

    async void OnChanged(UIChangeEventArgs args)
    {
        Console.WriteLine("Changed::: " + (string)args.Value);
        POI = (string)args.Value;
        if (POI == previousValue) return;
        previousValue = POI;

        if (POI.Length >= 3)
        {
            StateHasChanged();
            TypeAheadSuggestions = await State.GetPOITypeaheadSuggestions(POI);
            DropdownOpen = TypeAheadSuggestions.Count > 0;
            StateHasChanged();
        }
        else
        {
            DropdownOpen = false;
        }

    }

}
