@using System
@using System.Collections.Generic
@using System.ComponentModel
@using System.Threading.Tasks
@using EDScenicRouteCoreModels
@using EDScenicRouteWeb.Client.Shared
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using Microsoft.AspNetCore.Blazor.Components

<div class="panel panel-default">
    <div class="panel-body">
        <div class="row equal">
            <div class="col-xs-1 poi-icon-column">
                <span class="@(IconClass) poi-icon"></span>
            </div>
            <div class="col-xs-4">
                <span class="poi-name">@Item.POI.Name</span>
                <br />
                <span><i>@GalacticPOIEnumConverter.ConvertToString(Item.POI.Type)</i></span>
            </div>
            <div class="col-sm-3">
                <div class="row">
                    <p>@ExtraJumps(Item.ExtraDistance), <span class="text-info">@Item.ExtraDistance.ToString("N") Ly</span></p>
                </div>
                <div class="row">
                    <div class="progress progress-striped poi-jumps-bar">
                        <div class="progress-bar @ProgressBarColour" style="width: @DistancePercent%"></div>
                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="row equal">
                    <div class="col-lg-8">
                        System:<br />
                        <code id="@(IconId)" onclick="@(SelectBox)">@Item.POI.GalMapSearch</code>
                    </div>
                    <div class="col-lg-4">
                        <a class="btn btn-info" role="button" href=@Item.POI.GalMapUrl>EDSM Info</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {

    [Parameter]
    ScenicSuggestion Item { get; set; }

    [Parameter]
    float ShipJumpRange { get; set; }

    [Parameter]
    float MaxExtraDistance { get; set; }

    private string ExtraJumps(float distance)
    {
        var jumps = Math.Ceiling(distance / ShipJumpRange);
        return jumps > 1 ? $"{jumps} extra jumps" : "1 extra jump";
    }

    private int DistancePercent
    {
        get { return (int) Math.Round(100f * (Item.ExtraDistance / MaxExtraDistance)); }
    }

    private string ProgressBarColour
    {
        get
        {
            int distancePercent = DistancePercent;
            if (distancePercent > 80)
            {
                return "progress-bar-danger";
            }
            if (distancePercent > 50)
            {
                return "progress-bar-warning";
            }
            return "progress-bar-info";
        }
    }

    private void SelectBox()
    {
        RegisteredFunction.Invoke<bool>("selectbox", $"icon{Item?.POI.Id}");
    }

    private string IconClass => Item == null ? "" : GalacticPOIIcons.IconClassForGalacticPOIType(Item.POI.Type);

    private string IconId => $"icon{Item?.POI.Id}";
}
